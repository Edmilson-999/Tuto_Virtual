"""
app.py
Tutor Virtual com Sistema de Mem√≥ria Corrigido
"""

import streamlit as st
import os
from modules.chatbot import (
    gerar_resposta_com_memoria, 
    load_llm, 
    limpar_memoria,
    obter_tamanho_memoria
)
from modules.rag_system import qa_chain, processar_todos_pdfs
from utils.helpers import listar_pdfs

# ================= CONFIGURA√á√ÉO =================
st.set_page_config(
    page_title="Tutor Virtual IA",
    page_icon="ü§ñ",
    layout="centered"
)

# ================= CABE√áALHO =================
st.title("üéì Tutor Virtual Inteligente")
st.write("Fa√ßa perguntas e receba respostas contextuais com mem√≥ria de conversa.")

# ================= SIDEBAR =================
with st.sidebar:
    st.header("üìö Documentos")
    
    pdfs = listar_pdfs()
    
    if not pdfs:
        st.warning("Adicione PDFs em `data/docs/`")
    else:
        st.success(f"{len(pdfs)} PDF(s) encontrado(s)")
        for pdf in pdfs:
            st.write(f"‚Ä¢ {pdf}")
    
    if st.button("üîÑ Processar PDFs", type="secondary"):
        if pdfs:
            with st.spinner("Processando..."):
                if processar_todos_pdfs():
                    st.success("PDFs processados!")
                    st.rerun()
                else:
                    st.error("Erro no processamento")
    
    st.divider()
    
    # Configura√ß√µes
    st.header("‚öôÔ∏è Configura√ß√µes")
    modelo = st.selectbox("Modelo IA:", ["Mistral", "OpenAI GPT-4"])
    
    # Controles de mem√≥ria
    st.subheader("üß† Mem√≥ria")
    st.info(f"Intera√ß√µes na mem√≥ria: {obter_tamanho_memoria()}")
    
    if st.button("üßπ Limpar Mem√≥ria", type="secondary"):
        limpar_memoria()
        st.success("Mem√≥ria limpa!")
        st.rerun()
    
    # Status RAG
    if qa_chain and pdfs:
        st.success("‚úÖ RAG Ativo")
    else:
        st.warning("‚ö†Ô∏è RAG Inativo")

# ================= CHAT PRINCIPAL =================
st.divider()

# Sele√ß√£o de modo
if qa_chain and pdfs:
    modo = st.radio(
        "**Modo de resposta:**",
        ["Com base nos PDFs", "Chatbot com mem√≥ria", "Chatbot b√°sico"],
        index=1,  # Default para mem√≥ria
        horizontal=True
    )
else:
    modo = st.radio(
        "**Modo de resposta:**",
        ["Chatbot com mem√≥ria", "Chatbot b√°sico"],
        index=0,
        horizontal=True
    )

# Inicializar hist√≥rico na session state
if "messages" not in st.session_state:
    st.session_state.messages = []

# Exibir hist√≥rico
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input do usu√°rio
if pergunta := st.chat_input("Digite sua pergunta..."):
    # Adicionar pergunta ao hist√≥rico
    st.session_state.messages.append({"role": "user", "content": pergunta})
    
    with st.chat_message("user"):
        st.markdown(pergunta)

    # Gerar resposta
    with st.chat_message("assistant"):
        with st.spinner("Pensando..."):
            try:
                llm = load_llm(modelo=modelo)
                
                if modo == "Com base nos PDFs":
                    resposta = qa_chain.invoke({"query": pergunta})
                    resposta_texto = resposta['result']
                    
                elif modo == "Chatbot com mem√≥ria":
                    resposta_texto = gerar_resposta_com_memoria(pergunta, llm, usar_memoria=True)
                    
                else:  # Chatbot b√°sico
                    resposta_texto = gerar_resposta_com_memoria(pergunta, llm, usar_memoria=False)
                
                st.markdown(resposta_texto)
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": resposta_texto
                })
                
            except Exception as e:
                erro = f"Erro: {str(e)}"
                st.error(erro)
                st.session_state.messages.append({"role": "assistant", "content": erro})

# ================= EXEMPLOS DE USO =================
st.divider()
st.write("üí° **Teste a mem√≥ria:** Fa√ßa perguntas sequenciais como 'O que √© Python?' depois 'E Java?'")

# ================= RODAP√â =================
st.divider()
st.caption("Tutor Virtual ‚Ä¢ Com sistema de mem√≥ria ‚Ä¢ Desenvolvido com Streamlit e IA")